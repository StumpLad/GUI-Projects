from tkinter import *
import random

"""
== Note catcher ==
#feebe5
#c6edee
Test.txt

"""

top = Tk()
plaList = []
myRolls = []
rollTimes = 0
dieType = 0
myList = []
speList = []

def results():
    print(plaList)
    
def exportList():
    with open('Test.txt', 'w') as f:
        for item in plaList:
            f.write("%s\n" % item)

def clearWindow():
    for widgets in top.winfo_children():
        widgets.destroy()
    
def mainMen():
    clearWindow()
    Lmain = Label(top, text = "Block 5 GUI's")
    Lmain.grid(column = 1, row = 1)
    
    B1main = Button(text = "   Week 1   ", bg = "#c6edee", command = week1)
    B1main.grid(column = 1, row = 2)
    B2main = Button(text = "   Week 2   ", bg = "#c6edee", command = week2)
    B2main.grid(column = 1, row = 3)
    B3main = Button(text = "   Week 3   ", bg = "#c6edee", command = week3)
    B3main.grid(column = 1, row = 4)
    

def week1():
    
    def addition():
        newItem = E1.get()
        plaList.append(newItem)
        E1.delete(0, END)

    clearWindow()
        
    #This is a Label widget
    L1 = Label(top, text ="Playlist")
    L1.grid(column = 2, row = 1)

    #This is an Entry widget
    E1 = Entry(top, bd = 5)
    E1.grid(column = 0, row = 2)

    #This is a Button widget
    B1 = Button(text = "   Print playlist   ", bg = "yellow", command = results)
    B1.grid(column = 0, row = 1)

    B2 = Button(text = "   +   ", bg = "#c6edee", command = addition)
    B2.grid(column = 1, row = 2)

    B3 = Button(text = "   Export   ", bg = "#feebe5", command = exportList)
    B3.grid(column = 2, row = 2)

    Bclear = Button(text = "   ←   ", bg = "white", command = mainMen)
    Bclear.grid(column = 2, row = 3)

def week2():
    
    def rollDice():
        #Update data 
        dieType = E1W2.get()
        rollTimes = E2W2.get()
        
        #Clear window once data is gotten
        clearWindow()

        #Calculate dice rolls
        for x in range(0, int(rollTimes)):
            myRolls.append(random.randint(1, int(dieType)))
            
        #Display dice rolls and exit
        L4W2 = Label(top, text = "Your results are:")
        L4W2.grid(column = 0, row = 1)
        L5W2 = Label(top, text = "{}".format(myRolls))
        L5W2.grid(column = 0, row = 2)

        B2W2 = Button(text = "  Done  ", bg = "white", command = mainMen)
        B2W2.grid(column = 0, row = 3)

        B3W3 = Button(text = "  Again  ", bg = "white", command = week2)
        B3W3.grid(column = 1, row = 3)

    
    clearWindow()
    L1W2 = Label(top, text = "Dice roller program")
    L1W2.grid(column = 0, row = 1)
    L2W2 = Label(top, text = "How many sides?")
    L2W2.grid(column = 0, row = 3)
    L2W3 = Label(top, text = "How many rolls?")
    L2W3.grid(column = 0, row = 4)

    E1W2 = Entry(top, bd = 5)
    E1W2.grid(column = 1, row = 3)
    E2W2 = Entry(top, bd = 5)
    E2W2.grid(column = 1, row = 4)

    B1W2 = Button(text = "   Roll   ", bg = "#c6edee", command = rollDice)
    B1W2.grid(column = 3, row = 4)
    B3W2 = Button(text = " ← ", bg = "white", command = mainMen)
    B3W2.grid(column = 3, row = 1)
    
def week3():
    def clearList():
        clearWindow()
        L1C = Label(top, text = "Clear List?")
        L1C.grid(column = 0, row = 1)
        L2C = Label(top, text = "Y/N")
        L2C.grid(column = 0, row = 2)
        E1C = Entry(top, bd = 5)
        E1C.grid(column = 1, row = 2)
        confer = E1C.get()

        """if confer.lower() == "y":
            myList.clear()
            speList.clear()
            clearWindow()

            L3C = Label(top, text = "Lists are cleared")
            L3C.grid(column = 0, row = 1)
            B1C = Button(text = "  Done  ", bg = "white", command = week3)
            B1C.grid(column = 0, row = 1)
        else:
            week3()"""
            
    def sortList():
        clearWindow()
        L1S = Label(top, text = "Your New List:")
        L1S.grid(column = 0, row = 1)

        for x in myList:
            if x not in speList:
                speList.append(x)
        speList.sort()
        L2S = Label(top, text = "{}".format(speList))
        L2S.grid(column = 0, row = 2)
        B2AB = Button(text = "  Done  ", bg = "white", command = week3)
        B2AB.grid(column = 0, row = 3)
            
    def addList():
        def adding():
            vary = E1A.get()

            clearWindow()
            myList.append(int(vary))

            L1AB = Label(top, text = "Your list is:")
            L1AB.grid(column = 0, row = 1)
            L2AB = Label(top, text = "{}".format(myList))
            L2AB.grid(column = 0, row = 2)
            B1AB = Button(text = "  Again  ", bg = "white", command = addList)
            B1AB.grid(column = 1, row = 3)
            B2AB = Button(text = "  Done  ", bg = "white", command = week3)
            B2AB.grid(column = 0, row = 3)
            
        clearWindow()
        L2A = Label(top, text = "Add to List")
        L2A.grid(column = 0, row = 1)
        L1A = Label(top, text = "What would you like to add?")
        L1A.grid(column = 0, row = 3)
        B1A = Button(text = " ← ", bg = "white", command = week3)
        B1A.grid(column = 3, row = 1)
        B2A = Button(text = "Add", bg = "#feebe5", command = adding)
        B2A.grid(column = 3, row = 4)
        E1A = Entry(top, bd = 5)
        E1A.grid(column = 1, row = 3)

    """def leave():
        if len(speList) == 0:
            mainMen
        else:"""
            
        
    clearWindow()
    L1W3 = Label(top, text = "List Maker")
    L1W3.grid(column = 0, row = 1)
    L2W3 = Label(top, text = "What would you like to do?")
    L2W3.grid(column = 0, row = 3)
    Bclear = Button(text = "   ←   ", bg = "white", command = mainMen)
    Bclear.grid(column = 1, row = 1)

    B1M = Button(text = "Add to List", bg = "#c6edee", command = addList)
    B1M.grid(column = 0, row = 4)
    B2M = Button(text = "   Sort List   ", bg = "#c6edee", command = sortList)
    B2M.grid(column = 0, row = 5)
    B3M = Button(text = "Search List", bg = "#c6edee")
    B3M.grid(column = 0, row = 6)
    B4M = Button(text = " Clear List ", bg = "#c6edee", command = clearList)
    B4M.grid(column = 0, row = 7)

if __name__ == "__main__":
    mainMen()
    top.mainloop()
